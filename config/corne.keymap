/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// INCLUDES - START  ***********************************************************
// ZMK Core Includes
// JINIUS Includes
// Key position includes

#include "corne_42keys.h"
#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// INCLUDES - ENDS *************************************************************
// DEFINES - START *************************************************************
// DEFINES LAYERS - START ******************************************************
// Layer shotcuts defined for easier identification.
// The order must match in which they are defined below.

#define QWT__BT 0
#define FN__NUM 1
#define SYMBOLS 2
#define BT__NAV 3
#define CDH__BT 4

// DEFINES LAYERS - ENDS *******************************************************
// DEFINES BLUETOOTH PROFILE SELECTION - START *********************************

#define BTP0 BT_SEL 0
#define BTP1 BT_SEL 1
#define BTP2 BT_SEL 2
#define BTP3 BT_SEL 3
#define BTP4 BT_SEL 4

// DEFINES BLUETOOTH PROFILE SELECTION - ENDS **********************************
// DEFINES KEY TYPE ALIAS - START **********************************************

#define XXX &none   // To trap the key event in a given layer
#define ___ &trans  // To pass the key event to the next active layer

// DEFINES KEY TYPE ALIAS - ENDS ***********************************************
// DEFINES GLOBAL SETTINGS - START *********************************************

#define QUICK_TAP_MS 175

// DEFINES GLOBAL SETTINGS - ENDS **********************************************
// DEFINES KEY CONFIGURATION SETTINGS - START **********************************

&sk {
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// DEFINES KEY CONFIGURATION SETTINGS - ENDS ***********************************
// DEFINES COMBINATION KEYS FOR HOMEROW MODS - START ***************************

#define LEFT_HAND_KEYS LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define RIGHT_HAND_KEYS RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMB_KEYS LH0 LH1 LH2 RH0 RH1 RH2

// DEFINES COMBINATION KEYS FOR HOMEROW MODS - ENDS ****************************
// DEFINES - ENDS **************************************************************
// ROOT DEVICETREE NODE - START ************************************************

/ {
    // COMBOS - START **************************************************************
    // REF: https://zmk.dev/docs/features/combos
    // NOTES: Need to figure out if a specific combo is needed.
    //    > Possible combo would be <SHIFT> + <COMMAND> + <OPTION> + V in mac to
    //      paste the clipboard content as plain text
    // COMBOS - ENDS ***************************************************************
    // BEHAVIOR - START ************************************************************
    /*
// SAMPLE CODE 01: TOGGLE-ON-TAP, MOMENTARY-ON-HOLD LAYERS
// https://zmk.dev/docs/behaviors/hold-tap
// Hold-Tap Example: Momentary layer on Hold, Toggle layer on Tap
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &mo_tog 2 1     // &mo 2 on hold, &tog 1 on tap
                MO_TOG(3)       // &mo 3 on hold, &tog 3 on tap
            >;
        };
    };
};
//******************************************************************************

// SAMPLE CODE 02: HOMEROW MODS
// https://zmk.dev/docs/behaviors/hold-tap#option-1-cross-hand-only-modifiers-using-tap-unless-interrupted-and-positional-hold-tap-hold-trigger-key-positions
// Option 1: cross-hand only modifiers, using tap-unless-interrupted and positional hold-tap (hold-trigger-key-positions)
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>

/ {
    behaviors {
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                // position 0     pos 1             pos 2             pos 3             pos 4    pos 5    pos 6    pos 7    pos 8    pos 9    pos 10
                &lh_pht LSFT A    &lh_pht LGUI S    &lh_pht LALT D    &lh_pht LCTL F    &kp G    &kp H    &kp I    &kp J    &kp K    &kp L    &kp SEMI
            >;
        };
    };
};
//******************************************************************************

// SAMPLE CODE 03: HOMEROW MODS
// https://zmk.dev/docs/behaviors/hold-tap#option-2-tap-preferred
// Option 2: tap-preferred
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &hm LCTRL A &hm LGUI S &hm LALT D &hm LSHIFT F
            >;
        };
    };
};
//******************************************************************************

// SAMPLE CODE 04: HOMEROW MODS
// https://zmk.dev/docs/behaviors/hold-tap#option-3-balanced
// Option 3: balanced
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &bhm LCTRL A &bhm LGUI S &bhm LALT D &bhm LSHIFT F
            >;
        };
    };
};
//******************************************************************************

// SAMPLE CODE 05: MOD-MORPH
// https://zmk.dev/docs/behaviors/mod-morph#mod-morph
// Tapping sends first keypress
// Tapping while holding the specified modifier sends second keypress
// For Mac, adding this keypress will help with rotating between windows using
// GUI + GRAVE
// Already existing in ZMK: &gresc
// Sample to have GRAVE/ESCAPE on a single key
/ {
    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };
    };
};
*/
    // BEHAVIOR DEFINITIONS - START **********************************************
    // Homerow mod definition for left hand keys

    behaviors {
        /***********************************************
     **  Homerow mod for left split keyboard
     **  as explained here: https://github.com/urob/zmk-config#timeless-homerow-mods
     **  This is a expanded version of the same functionality along with the timings
     ***********************************************/

        hml: homerow_mod_left {
            label = "HOMEROW_MOD_LEFT";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        /***********************************************
     **  Homerow mod for right split keyboard
     **  as explained here: https://github.com/urob/zmk-config#timeless-homerow-mods
     **  This is a expanded version of the same functionality along with the timings
     ***********************************************/

        hmr: homerow_mod_right {
            label = "HOMEROW_MOD_RIGHT";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        /***********************************************
     **  Homerow mod for left split keyboard using Bluetooth profile selection 
     **  as explained here: https://github.com/urob/zmk-config#timeless-homerow-mods
     **  This is a expanded version of the same functionality along with the timings
     **  This behavior is used in the Bluetooth-Navigation layer only
     ***********************************************/

        hmlb: homerow_mod_left_bluetooth {
            label = "HOMEROW_MOD_LEFT_BLUETOOTH";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&bt>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        /***********************************************
     **  Smart Shift Key: As explained here: https://github.com/minusfive/zmk-config#smart-shift
     **  This configuration is for the left split keyboard
     **  Similar setup is defined for the right split keyboard
     **     hold: shift
     **     tap: sticky shift
     **     double-tap: caps-word
     ***********************************************/

        ss_left: smart_shift_left {
            label = "SMART_SHIFT_LEFT";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        /***********************************************
     **  Smart Shift Key: As explained here: https://github.com/minusfive/zmk-config#smart-shift
     **  This configuration is for the right split keyboard
     **  Similar setup is defined for the left split keyboard
     **     hold: shift
     **     tap: sticky shift
     **     double-tap: caps-word
     ***********************************************/

        ss_right: smart_shift_right {
            label = "SMART_SHIFT_RIGHT";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk RSHFT>, <&caps_word>;

            mods = <(MOD_RSFT)>;
        };

        /***********************************************
     **  Backspace Delete: As defined here: https://github.com/minusfive/zmk-config/blob/main/knucklehead/behaviors.dtsi
     **     tap: backspace
     **     hold: repeat backspace
     **     shift + tap: delete
     **     shift + hold: repeat delete
     ***********************************************/

        bkspc_del: backspace_delete {
            label = "BACKSPACE_DELETE";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /***********************************************
     **  ESC Grave:
     **     tap: ESCAPE (ESC)
     **     hold: repeat ESCAPE (ESC)
     **     gui/command + tap: command + grave (~)
     **     gui/command + : repeat command + grave (~)
     ***********************************************/

        escgrv: escape_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ESCAPE_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        /***********************************************
     **  Caret Exclamation:
     **     tap: caret (^)
     **     hold: repeat caret (^)
     **     shift + tap: exclamation (!)
     **     shift + hold: repeat exclamation (!)
     ***********************************************/

        cart_excl: caret_exclamation {
            label = "CARET_EXCLAMATION";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CARET>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /***********************************************
     **  At Ampersand:
     **     tap: ampersand (&)
     **     hold: repeat ampersand (&)
     **     shift + tap: at (@)
     **     shift + hold: repeat at (@)
     ***********************************************/

        amp_at: ampersand_at {
            label = "AMPERSAND_AT";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp AT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /***********************************************
     **  Star Hash:
     **     tap: star (*)
     **     hold: repeat star (*)
     **     shift + tap: hash (#)
     **     shift + hold: repeat hash (#)
     ***********************************************/

        star_hash: star_hash {
            label = "STAR_HASH";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp HASH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /***********************************************
     **  Left Parenthesis Dollar:
     **     tap: left parenthesis (()
     **     hold: repeat left parenthesis (()
     **     shift + tap: dollar ($)
     **     shift + hold: repeat dollar ($)
     ***********************************************/

        lpar_dllr: l_parenthesis_dollar {
            label = "LEFT_PARENTHESIS_DOLLAR";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp DOLLAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /***********************************************
     **  Right Parenthesis Percent:
     **     tap: right parenthesis ())
     **     hold: repeat right parenthesis ())
     **     shift + tap: percent (%)
     **     shift + hold: repeat percent (%)
     ***********************************************/

        rpar_prcnt: r_parenthesis_percent {
            label = "RIGHT_PARENTHESIS_PERCENT";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp PERCENT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /***********************************************
     **  SPACE COMMAND LAYER FUN/NUM: On the left key board
     **     tap: space
     **     hold: command
     **     double tap: toggle layer
     ***********************************************/

        s_c_fn_l: space_cmd_funnum_left {
            label = "SPACE_CMD_FUNNUM_LEFT";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LGUI SPACE>, <&tog FN__NUM>;
        };

        /***********************************************
     **  SPACE COMMAND LAYER SYMBOLS: On the right key board
     **     tap: space
     **     hold: command
     **     double tap: toggle layer
     ***********************************************/

        s_c_sym_r: space_cmd_sym_right {
            label = "SPACE_CMD_SYMBOLS_RIGHT";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt RGUI SPACE>, <&tog SYMBOLS>;
        };

        /***********************************************
     **  CONTROL LAYER BT__NAV: On the left key board
     **     tap: none
     **     hold: control
     **     double tap: toggle layer
     ***********************************************/

        c_btnav_l: cntrl_bt_nav_left {
            label = "CONTROL_BT_NAV_LEFT";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL XXX>, <&tog BT__NAV>;
        };

        /***********************************************
     **  CONTROL LAYER COLEMAKDH: On the right key board
     **     tap: none
     **     hold: control
     **     double tap: toggle layer
     ***********************************************/

        c_cdh_r: ctrl_cdh_right {
            label = "CONTROL_COLEMAKDH_RIGHT";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL XXX>, <&tog CDH__BT>;
        };
    };

    // BEHAVIOR DEFINITIONS - END ************************************************
    // BEHAVIOR - ENDS *************************************************************
    // MACROS - START **************************************************************
    /* ** Macro definition currently not in use
 ** Place holder only.
 ** Will be used later for switching between my personal Mac and Windows system switching
    macros {
      con_bt: con_bt {
        label = "con_bt";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
          = <&macro_tap &bt BT_SEL 0>
          , <&macro_tap &tog 0>
        ;
      };
      
      con_usb: con_usb {
        label = "con_usb";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
          = <&macro_tap &out OUT_USB>
          , <&macro_tap &tog 1>
        ;
      };
    };
*/
    // MACROS - ENDS ***************************************************************
    // KEYMAP NODE - START *********************************************************


    // LAYERS - ENDS ***************************************************************

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
          &to 1     &kp Q  &kp W  &kp F     &kp P                 &kp B        &kp J    &kp L                 &kp U           &kp
          Y    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
          &kp TAB    &kp A  &kp R  &kp S     &hml LS(LG(SPACE)) T  &kp G        &kp M    &hml LS(LG(SPACE)) N  &kp E           &kp I    &kp O                 &kp SEMI
          &kp LSHFT  &kp Z  &kp X  &kp C     &kp D                 &kp V        &kp K    &kp H                 &hml SQT COMMA  &kp DOT  &kp QUESTION          &kp EXCLAMATION
                                   &kp LGUI  &trans                &kp SPACE    &kp RET  &lt 1 BACKSPACE       &kp LALT
                >;
        };

        ru {
                    bindings = <
        &to 0      &trans  &hml RU_CYRILLIC_SHCHA RU_CYRILLIC_SHA            &kp RU_CYRILLIC_EF   &kp RU_CYRILLIC_PE  &kp RU_CYRILLIC_BE     &kp RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_EL  &kp RU_CYRILLIC_U                   &kp RU_CYRILLIC_YU  &kp RU_CYRILLIC_CHE  &kp MINUS
        &kp TAB    &kp RU_CYRILLIC_A        &kp RU_CYRILLIC_ER                                &kp RU_CYRILLIC_ES   &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_GHE    &kp RU_CYRILLIC_EM   &kp RU_CYRILLIC_EN  &hml RU_CYRILLIC_IO RU_CYRILLIC_IE  &kp RU_CYRILLIC_I   &kp RU_CYRILLIC_O    &kp RIGHT_PARENTHESIS
        &kp LSHFT  &kp RU_CYRILLIC_ZE       &hml RU_CYRILLIC_HARD_SIGN RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_TSE  &kp RU_CYRILLIC_DE  &kp RU_CYRILLIC_VE     &kp RU_CYRILLIC_KA   &kp RU_CYRILLIC_HA  &kp COMMA                           &kp DOT             &kp QUESTION         &kp EXCLAMATION
                                                                                              &kp LGUI             &trans
                                                                                                    &kp SPACE              &kp RET              &lt 2 BACKSPACE     &kp LALT
                    >;
                };
    };

// KEYMAP NODE - ENDS **********************************************************

};

// ROOT DEVICETREE NODE - ENDS *************************************************
